from flask import Flask, render_template, request
import requests
from datetime import datetime, timedelta

app = Flask(__name__)

app.config['TEMPLATES_AUTO_RELOAD'] = True

GITHUB_ORG = 'OptivaInc'
GITHUB_TOKEN = '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'  # Replace with your GitHub PAT


def get_org_repos(org):
    url = f'https://api.github.com/orgs/{org}/repos?per_page=100'
    headers = {'Authorization': f'token {GITHUB_TOKEN}'}
    response = requests.get(url, headers=headers)
    if response.ok:
        return [repo['full_name'] for repo in response.json()]
    return []


def get_merged_prs(repo, branch, days):
    url = f'https://api.github.com/repos/{repo}/pulls'
    headers = {'Authorization': f'token {GITHUB_TOKEN}'}
    since = datetime.utcnow() - timedelta(days=days)

    params = {
        'state': 'closed',
        'base': branch,
        'sort': 'updated',
        'direction': 'desc',
        'per_page': 100
    }

    response = requests.get(url, headers=headers, params=params)
    if not response.ok:
        return []

    pr_list = []
    for pr in response.json():
        if pr.get('merged_at'):
            merged_at = datetime.strptime(pr['merged_at'], '%Y-%m-%dT%H:%M:%SZ')
            if merged_at >= since:
                pr_list.append({
                    'title': pr['title'],
                    'author': pr['user']['login'],
                    'merged_at': merged_at.strftime('%Y-%m-%d %H:%M'),
                    'url': pr['html_url'],
                    'repo': repo
                })
    return pr_list


@app.route('/', methods=['GET', 'POST'])
def index():
    repo_list = get_org_repos(GITHUB_ORG)
    pr_data, error = [], None

    if request.method == 'POST':
        selected_repos = request.form.getlist('repo')
        branch = request.form.get('branch') or 'main'
        days = int(request.form.get('days') or 7)

        if not selected_repos:
            error = "Please select at least one repository."
        else:
            for repo in selected_repos:
                prs = get_merged_prs(repo, branch, days)
                pr_data.extend(prs)

    return render_template('index.html',
                           repo_list=repo_list,
                           pr_data=pr_data,
                           error=error,
                           branch=request.form.get('branch'),
                           days=request.form.get('days'),
                           selected_repos=request.form.getlist('repo'))

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
